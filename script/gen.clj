#!/usr/bin/env bb
(require '[clojure.string :as string])
(require '[cheshire.core :as json])
(require '[clojure.tools.cli :refer [parse-opts]])

;; option parser
(def cli-options
  [["-i" "--input FILE"
    :default "schema.json"]
   ["-n" "--namespace NAMESPACE"
    :default "apex.rpc.client"]
   ["-h" "--help"]])

(defn usage [options-summary]
  (->> ["This is my program. There are many like it, but this one is mine."
        ""
        "Usage: apex-rpc [options] action"
        ""
        "Options:"
        options-summary
        ""
        "Actions:"
        "  gen    generates Clojure clients"
        ""
        "Please refer to the manual page for more information."]
       (string/join \newline)))

(defn error-msg [errors]
  (str "The following errors occurred while parsing your command:\n\n"
       (string/join \newline errors)))

(defn validate-args
  "Validate command line arguments. Either return a map indicating the program
  should exit (with a error message, and optional ok status), or a map
  indicating the action the program should take and the options provided."
  [args]
  (let [{:keys [options arguments errors summary]} (parse-opts args cli-options)]
    (cond
      ;; help => exit OK with usage summary
      (:help options)
      {:exit-message (usage summary) :ok? true}

      ;; errors => exit with description of errors
      errors
      {:exit-message (error-msg errors)}

      ;; custom validation on arguments
      (and (= 1 (count arguments))
           (#{"gen"} (first arguments)))
      {:action (first arguments) :options options}

      ;; failed custom validation => exit with usage summary
      :else
      {:exit-message (usage summary)})))

(defn exit [status msg]
  (println msg)
  (System/exit status))

;; case conversion
(defn kebab-case [s]
  (-> (string/trim s)
      (string/replace #"([a-z\d])([A-Z]+)" "$1-$2")
      (string/replace #"[_\s]+" "-")
      (string/lower-case)))

;; code generator
(defn headers [options]
  (->> [";; Do not edit, this file was generated by github.com/hden/apex-rpc."
        ""
        (format "(ns %s" (:namespace options))
        "  (:require [apex-rpc.core :refer [call]]))"]
       (string/join \newline)))

(defn gen-client [options]
  (let [schema (-> (slurp (:input options))
                   (json/parse-string true))]
    (println (headers options))
    (doseq [{:keys [name description]} (:methods schema)]
      (println (->> [""
                     (format "(defn %s" (kebab-case name))
                     (format "  \"%s\"" (or description "not available"))
                     "  [spec arg-map]"
                     (format "  (call (merge spec {:method \"%s\" :arg-map arg-map})))" name)]
                    (string/join \newline))))))

(let [{:keys [action options exit-message ok?]} (validate-args *command-line-args*)]
  (if exit-message
    (exit (if ok? 0 1) exit-message)
    (case action
      "gen" (gen-client options)
      (println "No matching clause:" action))))
